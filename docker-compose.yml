services:
  app:
    container_name: golang-clean-arch-template-app
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    environment:
      - ENV=docker
    networks:
      - golang_clean_arch_network
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy

  redis:
    container_name: golang-clean-arch-template-cache
    image: redis
    command: redis-server
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_volume:/data
    environment:
      - REDIS_REPLICATION_MODE=master
    networks:
      - golang_clean_arch_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]

  mysql:
    container_name: golang-clean-arch-template-db
    image: mysql:8.0.23
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_USER: mysql
      MYSQL_PASSWORD: mysql
      MYSQL_DATABASE: db_todo
      LANG: en_US.utf8
    volumes:
      - ./scripts/migrations:/docker-entrypoint-initdb.d
      - mysql_volume:/var/lib/mysql
    command:
      - "--character-set-server=utf8"
      - "--collation-server=utf8_general_ci"
      - "--sql_mode="
    cap_add:
      - SYS_NICE
    tmpfs:
      - /var/lib/mysql/:rw,noexec,nosuid,size=600m
      - /tmp/:rw,noexec,nosuid,size=50m
    networks:
      - golang_clean_arch_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

networks:
  golang_clean_arch_network:

volumes:
  redis_volume:
    driver: local
  mysql_volume:
    driver: local
