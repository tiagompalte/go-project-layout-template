// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package application

import (
	"github.com/tiagompalte/golang-clean-arch-template/internal/app/usecase"
	"github.com/tiagompalte/golang-clean-arch-template/internal/pkg/infra/data"
	"github.com/tiagompalte/golang-clean-arch-template/internal/pkg/infra/uow"
	"github.com/tiagompalte/golang-clean-arch-template/pkg/config"
	"github.com/tiagompalte/golang-clean-arch-template/pkg/logger"
	"github.com/tiagompalte/golang-clean-arch-template/pkg/repository"
	"github.com/tiagompalte/golang-clean-arch-template/pkg/server"
)

// Injectors from wire.go:

func Build() (App, error) {
	configsConfig := config.ProviderSet()
	serverServer := server.ProviderSet(configsConfig)
	loggerLogger := logger.NewLogrus()
	dataManager := repository.ProviderSet(configsConfig)
	uowUow := uow.NewUow(dataManager)
	createTask := usecase.NewCreateTaskImpl(uowUow)
	categoryRepository := data.NewCategoryRepository(dataManager)
	findAllCategory := usecase.NewFindAllCategoryImpl(categoryRepository)
	taskRepository := data.NewTaskRepository(dataManager)
	findAllTask := usecase.NewFindAllTaskImpl(taskRepository)
	findOneTask := usecase.NewFindOneTaskImpl(taskRepository)
	updateTaskDone := usecase.NewUpdateTaskDoneImpl(taskRepository)
	updateTaskUndone := usecase.NewUpdateTaskUndoneImpl(taskRepository)
	deleteTask := usecase.NewDeleteTaskImpl(taskRepository)
	useCase := usecase.UseCase{
		CreateTask:       createTask,
		FindAllCategory:  findAllCategory,
		FindAllTask:      findAllTask,
		FindOneTask:      findOneTask,
		UpdateTaskDone:   updateTaskDone,
		UpdateTaskUndone: updateTaskUndone,
		DeleteTask:       deleteTask,
	}
	app := ProvideApplication(configsConfig, serverServer, loggerLogger, useCase)
	return app, nil
}
